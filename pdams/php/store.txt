update_profile.php
why i punya salah
<?php
if (!isset($_POST)) {
    $response = array('status' => 'failed', 'data' => null);
    sendJsonResponse($response);
    die();
}

$icNumber = $_POST['icNumber'];
$name = $_POST['name'];
$bloodType = $_POST['bloodType'];
$email = $_POST['email'];
$gender = $_POST['gender'];
$medicine = $_POST['medicine'];

include_once("dbconnect.php");
$query = "SELECT * FROM governmentdoctor WHERE ICNumber='$icNumber'";
$result = $conn->query($query);

if ($result->num_rows > 0) {
    // User is a government doctor
    $user_type = "governmentDoctor";
	while ($row = $result->fetch_assoc()) {
	
    $sqlupdate = "UPDATE governmentdoctor SET name ='$name', bloodType = '$bloodType', email ='$email', gender ='$gender', medicine ='$medicine' WHERE ICNumber = '$icNumber'";
    databaseUpdate($sqlupdate);
    die();
	}
} else {
    // Check if the user exists in the clinicdoctor table
	$query = "SELECT * FROM clinicdoctor WHERE ICNumber='$icNumber'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        // User is a clinic doctor
     $user_type = "clinicDoctor";
	 while ($row = $result->fetch_assoc()) {
	
    $sqlupdate = "UPDATE clinicdoctor SET name ='$name', bloodType = '$bloodType', email ='$email', gender ='$gender', medicine ='$medicine' WHERE ICNumber = '$icNumber'";
    databaseUpdate($sqlupdate);
	}
    } else {
        // Check if the user exists in the normaluser table
			$query = "SELECT * FROM normaluser WHERE ICNumber='$icNumber'";
        $result = $conn->query($query);

        if ($result->num_rows > 0) {
            // User is a normal user
            $user_type = "user";
            	while ($row = $result->fetch_assoc()) {

    $sqlupdate = "UPDATE normaluser SET name ='$name', bloodType = '$bloodType', email ='$email', gender ='$gender', medicine ='$medicine' WHERE ICNumber = '$icNumber'";
    databaseUpdate($sqlupdate);
	
	
	}
        } else {
            // Invalid credentials
          $response = array('status' => 'failed', 'data' => null);
    sendJsonResponse($response);
    die();
        }
    }
}



function databaseUpdate($sql){
    include_once("dbconnect.php");
    if ($conn->query($sql) === TRUE) {
        $response = array('status' => 'success', 'data' => null);
        sendJsonResponse($response);
    } else {
        $response = array('status' => 'failed', 'data' => null);
        sendJsonResponse($response);
    }
}

function sendJsonResponse($sentArray)
{
    header('Content-Type: application/json');
    echo json_encode($sentArray);
}
?>





ask chatgpt
import 'package:flutter/material.dart';
import 'package:pdams/screen/successbook.dart';
import 'package:table_calendar/table_calendar.dart';

import '../config.dart';
import '../model/button.dart';
import '../model/doctor.dart';
import 'camerascanscreen.dart';
import 'controlscreen.dart';

class BookPersonalAppointmentScreen extends StatefulWidget {
  final Doctor user;
  const BookPersonalAppointmentScreen({super.key, required this.user});

  @override
  State<BookPersonalAppointmentScreen> createState() =>
      _BookPatientAppointmentScreenState();
}

class _BookPatientAppointmentScreenState
    extends State<BookPersonalAppointmentScreen> {

  final TextEditingController _appointmentNameEditingController =
      TextEditingController();
  CalendarFormat _format = CalendarFormat.month;
  DateTime _focusDay = DateTime.now();
  DateTime _currentDay = DateTime.now();
  int? _currentIndex;
  bool _dateSelected = false;
  bool _timeSelected = false;

  @override
  Widget build(BuildContext context) {
    Config().init(context);
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          "PDAMs",
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        backgroundColor: Colors.blue[300],
        leading: IconButton(
          icon: Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.push(
                context,
                MaterialPageRoute(
                    builder: (context) => ControlScreen(user: widget.user)));
          },
        ),
        actions: <Widget>[
          IconButton(
            icon: const Icon(Icons.camera_alt),
            onPressed: () {
              Navigator.push(context,
                  MaterialPageRoute(builder: (context) => CameraScanScreen()));
            },
          ),
        ],
      ),
      body: CustomScrollView(
        slivers: <Widget>[
          SliverToBoxAdapter(
            child: Column(
              children: <Widget>[
                _tableCalendar(),
                const Padding(
                  padding: EdgeInsets.symmetric(horizontal: 10, vertical: 25),
                  child: Center(
                    child: Text(
                      "Select The Booking Time",
                      style:
                          TextStyle(fontWeight: FontWeight.bold, fontSize: 20),
                    ),
                  ),
                )
              ],
            ),
          ),
          SliverGrid(
            delegate: SliverChildBuilderDelegate(
              (context, index) {
                return InkWell(
                  splashColor: Colors.transparent,
                  onTap: () {
                    setState(() {
                      _currentIndex = index;
                      _timeSelected = true;
                    });
                  },
                  child: Container(
                    margin: const EdgeInsets.all(5),
                    decoration: BoxDecoration(
                      border: Border.all(
                        color: _currentIndex == index
                            ? Colors.white
                            : Colors.black,
                      ),
                      borderRadius: BorderRadius.circular(15),
                      color:
                          _currentIndex == index ? Config.primaryColor : null,
                    ),
                    alignment: Alignment.center,
                    child: Text(
                      '${index}:00 ${index > 11 ? "PM" : "AM"}',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        color: _currentIndex == index ? Colors.white : null,
                      ),
                    ),
                  ),
                );
              },
              childCount: 24,
            ),
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 4, childAspectRatio: 1.5),
          ),
          SliverToBoxAdapter(
            child: Form(
          
              child: Container(
                padding:
                    const EdgeInsets.symmetric(horizontal: 10, vertical: 20),
                child: Column(
                  children: [
                    TextFormField(
                      controller: _appointmentNameEditingController,
                      decoration: InputDecoration(
                        hintText: 'Appointment Title',
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(20),
                        ),
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter the appointment title';
                        }
                        return null;
                      },
                    ),
                    Button(
                      width: double.infinity,
                      title: 'Make Appointment',
                      onPressed: () {
                        _makePersonalAppointment();
                        Navigator.pushReplacement(
                          context,
                          MaterialPageRoute(
                              builder: (context) =>
                                  SuccessBookScreen(user: Doctor())),
                        );
                      },
                  
                      disable: _timeSelected && _dateSelected ? false : true,
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _tableCalendar() {
    return TableCalendar(
        focusedDay: _focusDay,
        firstDay: DateTime.now(),
        lastDay: DateTime(2024, 12, 31),
        calendarFormat: _format,
        currentDay: _currentDay,
        rowHeight: 48,
        calendarStyle: const CalendarStyle(
          todayDecoration:
              BoxDecoration(color: Config.primaryColor, shape: BoxShape.circle),
        ),
        availableCalendarFormats: const {
          CalendarFormat.month: 'Month',
        },
        onFormatChanged: (format) {
          setState(() {
            _format = format;
          });
        },
        onDaySelected: ((selectedDay, focusedDay) {
          setState(() {
            _currentDay = selectedDay;
            _focusDay = focusedDay;
            _dateSelected = true;
          });
        }));
  }

  void _makePersonalAppointment() {}
}
 
Above is my bookpersonalappointment.dart, below is my appointment database:
`ID` int(11) NOT NULL AUTO_INCREMENT,
  `ICNumber` varchar(20) DEFAULT NULL,
  `name` varchar(100) DEFAULT NULL,
  `patientICNumber` varchar(20) DEFAULT NULL,
  `patientName` varchar(144) DEFAULT NULL,
  `appointmentName` varchar(100) DEFAULT NULL,
  `date` date DEFAULT NULL,
  `time` time DEFAULT NULL,
  `type` varchar(50) DEFAULT NULL,
  `status` varchar(15) DEFAULT NULL

can you help me to complete my _makePersonalAppointment() function and create a php code to me to insert data which is insert ICNumber, name, appointmentName, date, time, type base on above information.



appointment table
CREATE TABLE `appointment` (
  `ID` int(11) PRIMARY KEY NOT NULL,
  `ICNumber` varchar(20) DEFAULT NULL,
  `name` varchar(100) DEFAULT NULL,
  `patientICNumber` varchar(20) DEFAULT NULL,
  `patientName` varchar(144) DEFAULT NULL,
  `appointmentName` varchar(100) DEFAULT NULL,
  `date` date DEFAULT NULL,
  `time` time DEFAULT NULL,
  `type` varchar(50) DEFAULT NULL,
  `status` varchar(15) DEFAULT NULL
) 